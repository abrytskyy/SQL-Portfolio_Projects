--MySQL(PostgreSQL)




--Q1 Find the running cumulative total demand.
--From the demand2 table, find the cumulative total sum for qty

DROP TABLE IF EXISTS demand2;

CREATE TABLE demand2 (
  day INT,
  qty FLOAT
);

INSERT INTO demand2
  (day, qty)
VALUES
  (1, 10),
  (2, 6),
  (3, 21),
  (4, 9),
  (6, 12),
  (7, 18),
  (8, 3),
  (9, 6),
  (10, 23);

--Solution Q1
select *,
sum(qty) over(order by day) as cumQty from demand2;

--Solution Q1(1)
SELECT day, 
       qty,
       SUM(qty) OVER(ORDER BY day) as cumQty 
FROM demand2;




--Q2 Find the running cumulative total demand by product
--From the demand table, find the cumulative total sum for qty for each product category.
DROP TABLE IF EXISTS demand;

CREATE TABLE demand (
  product VARCHAR(10),
  day INT,
  qty FLOAT
);

INSERT INTO demand
  (product, day, qty)
VALUES
  ("A", 1, 10),
  ("A", 2, 6),
  ("A", 3, 21),
  ("A", 4, 9),
  ("A", 5, 19),
  ("B", 1, 12),
  ("B", 2, 18),
  ("B", 3, 3),
  ("B", 4, 6),
  ("B", 5, 23);

For PostgreSQL:
INSERT INTO demand
  (product, day, qty)
VALUES
  ('A', 1, 10),
  ('A', 2, 6),
  ('A', 3, 21),
  ('A', 4, 9),
  ('A', 5, 19),
  ('B', 1, 12),
  ('B', 2, 18),
  ('B', 3, 3),
  ('B', 4, 6),
  ('B', 5, 23);

--Solution Q2
select *,
sum(qty) over(partition by product order by day) as CUMSUM
from demand;

--Solution Q2
SELECT product,
	day,
        qty,
        SUM(qty) OVER(PARTITION BY product ORDER BY day) as CUMSUM
FROM demand;




--Q3 When are the top 2 worst performing days for each product?
--Extract the two worst performing days of each product in terms of number of qty sold. Paraphrasing it: 
--Get the days corresponding to the two minimum most values of qty for each product.

--Solution 3
select * from
(select *,
row_number() over(partition by product order by qty) as RN
from demand) sub
where RN <=2

--Solution 3(1)
with tbl as (SELECT PRODUCT,
                    qty,
                    day,
                    row_number() over (partition by product order by qty) as RN
	     FROM demand)
select product, day, qty
from tbl a
where RN in (1,2)

--Solution 3(2)
select * from
(select *, 
	rank() over (partition by product order by qty) as rn
from demand)s
where rn in (1,2)




--Q4. Find the percentage increase in qty compared to the previous day.

--Solution 4(posgreSQL)
SELECT 
    *,
    LAG(qty) OVER(PARTITION BY product) AS lag_qty,
    ROUND(((qty - LAG(qty) OVER(PARTITION BY product)) / LAG(qty) OVER(PARTITION BY product) * 100)::numeric, 2) AS perc_increase
FROM demand

--Solution 4(My SQL)
with tbl as (select product, 
                    day, 
                    qty, 
                    lag(qty, 1) over (partition by product order by day) as qty_lag
from demand)
select *,
round(((qty - qty_lag)/qty_lag) * 100, 2) as perc_increase
from tbl
where qty_lag is not null




--Q5. Show the minimum and maximum ‘qty’ sold for each product as separate columns.
--Difficulty Level: Easy
--Create two new columns in the table that shows the minimum and the maximum quantity sold for each product.

--Solution 5
select *, 
	   min(qty) over(partition by product) min_qty,
	   max(qty) over(partition by product) max_qty
	   from demand




--Q6. Calculate the difference between the second largest and the second smallest sales qty
--Difficulty Level: Hard

--Solution 6
select product,
	   day,
	   qty
from
	(select *,
	rank() over (partition by product order by qty) rn
	from demand)
where rn in (select max(rn)-1 from
				(select *,
					rank() over (partition by product order by qty) rn
				 from demand))
   or rn in (select min(rn)+1 from
				(select *,
					rank() over (partition by product order by qty) rn
				 from demand))




--Q7. On each day, which product had the highest sales?
--Difficulty Lavel: Intermediate

--Solution 7
with tbl as (
  select day, 
          product,
          qty,
          max(qty) over (partition by day) as maxqty
  from demand)
select * 
from tbl
where qty = maxqty

--Solution 7(1)
select * from	   
(select *, 
	   max(qty) over(partition by day) max_qty
	   from demand)   
where qty=max_qty

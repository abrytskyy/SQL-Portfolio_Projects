--AdventureWorks2019




--Question 1(Basic):
Write a SQL Statement that will give you a count of each object type in the AdventureWorks database. Order by count descending.

Hint:
Use the sys.objects table

--Solution 1:

select type_desc, count(*) as count_by_type from sys.objects
group by type_desc
order by 2 desc




--Question 2(Intermediate)
Question 2:
a. Write a SQL Statement that will show a count of schemas, tables, and columns (do not include views) in the AdventureWorks database.
b. Write a similar statement as part a but list each schema, table, and column (do not include views). This table can be used later in the course.

Hint:
-Either use sys.tables to join sys.columns and sys.schemas.
-Or use information_schema.columns, but you will need to remove the view tables (Use information_schema.views).

--Solution 2a:
select count(distinct TABLE_SCHEMA) as count_of_schemas, 
	count(distinct TABLE_NAME) as count_of_tables, 
	count(COLUMN_NAME) as count_of_columns 
from information_schema.columns
where TABLE_NAME not in (select TABLE_NAME from information_schema.views);

select count(distinct s.name) as ScemaName,
	count(distinct t.name) as TableName,
	count(c.name) as ColumnName
from sys.tables t
	INNER JOIN sys.columns c on c.object_id = t.object_id
	INNER JOIN sys.schemas s on s.schema_id = t.schema_id

--Solution 2b:
select TABLE_SCHEMA, TABLE_NAME, COLUMN_NAME 
from information_schema.columns
where TABLE_NAME not in (select TABLE_NAME from information_schema.views);

select s.name as ScemaName, t.name as TableName, c.name as ColumnName
from sys.tables t
	INNER JOIN sys.columns c on c.object_id = t.object_id
	INNER JOIN sys.schemas s on s.schema_id = t.schema_id




--Question 3:
We learned in question 1 that 89 check constraints exist in the AdventureWorks Database. In this question we are going to determine what the 
check constraints are doing while creating a new database and table.

a. Create a new database called "Edited_AdventureWorks" (we are creating another database so we don't   overwrite or change the AdventureWorks database). 
Then write a USE statement to connect to the new database.

b. Using the following tables - sys.check_constraints, sys.tables, and sys.columns to write a query that will give you TableName, 
ColumnName, CheckConstraintName, and CheckConstraintDefinition

c. Create a table named "tbl_CheckConstraint" in the "Edited_AdventureWorks" database with the following  columns and data types:
TableName varchar(100)
ColumnName varchar(100)
CheckConsraint varchar(250)
Definition varchar(500)
ConstraintLevel varchar(100)

d. Using the query in part b insert the data into "tbl_CheckConstraint"
e. Using a case statement write an update statement (update ConstraintLevel) that will specify whether the constraint is assigned to the column or the table.
f. What does this mean?
g. Once you're done interpreting the results drop the tbl_CheckConstraint table

Hint:
a. Because we are now connected to Edited_AdventureWorks we must fully qualify AdventureWorks2019 in our From
i.e., Select * From AdventureWorks2019.sys.tables
b. -- tables.object_id = check_constraints.parent_object_id
    -- Use a left join to join sys.columns to sys.check_constraints. (we want all 89 constraints/rows)
    -- sys.columns and sys.check_constraints have to be joined on two columns:
columns.column_id = check_constraints.parent_column_id
columns.object_id = check_constraints.parent_object_id
e. If the ColumnName is null in our created table then the constraint is assigned to the table not the column.

--Solution 3a:
CREATE DATABASE Edited_AdventureWorks
USE Edited_AdventureWorks

--Solution3b
select * from AdventureWorks2019.sys.tables

select t.name as TableName
		,c.name as ColumnName
		,cc.name as CheckConstraintName
		,cc.definition as CheckConstraintDefinition
		from sys.check_constraints cc
inner join sys.tables t
on t.object_id = cc.parent_object_id
left join sys.columns c
on c.column_id = cc.parent_column_id and
   c.object_id = cc.parent_object_id




